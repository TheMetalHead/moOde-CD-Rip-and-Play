# Custom 'abcde.conf' file for 'cd-rip-and-or-play.sh'.
#
# Use permissions of 644

# Support for systems with low disk space:
#
# If set to y, conserves disk space by encoding tracks immediately after reading
# them.  This is substantially slower than normal operation but requires several
# hundred MB less space to complete the encoding of an entire CD.  Use only if your
# system is low on space and cannot encode as quickly as it can read.
# Note that this option may also help when reading a CD with errors. This is because
# on a scratchy disk reading is quite timing sensitive and this option reduces the
# background load on the system which allows the ripping program more precise control.
# n:	Default parallelisation (read entire CD in while encoding)
# y:	No parallelisation (rip, encode, rip, encode...)
# Probably needs to be 'y' on a 1GB pi.
# If 'LOWDISK=y' then 'NOGAP' must be 'n'.
LOWDISK=n

# Activate lame's --nogap option, that allows files found in CDs with no silence
# between songs (such as live concerts) to be encoded without noticeable gaps.
# WARNING: lame's --nogap disables the Xing mp3 tag.  This tag is required for mp3
# players to correctly display track lengths when playing variable-bit-rate mp3 files.
#NOGAP=y

## If 'LOWDISK=y' then 'NOGAP' must be 'n'.
#NOGAP=n

# Comma separated list of output types.
# Quite why anyone would want to encode to 2 or more formats is a mystery. Maybe
# they want to listen in high quality locally but lower quality on a remote device.
#OUTPUTTYPE="mp3,flac,mpc"
OUTPUTTYPE="flac"

# Do not rip the whole cd into one track.
ONETRACK="n"

# Approximate read times.
# 22 minutes at x8
# 19 minutes at x16	14 track 69 minute cd
# 10 minutes at x24
# Leave this option blank to automatically use the fastest speed.
CDSPEEDVALUE="16"			# Multiples of 150kbs

# Define how many encoders to run at once. This makes for huge speedups
# Defaults to 1.
MAXPROCS=2

# 'musicbrainz' has the better tags except it has no genres.
# 'cddb' has the genres but not the better tags.
# The lookup method happens in the specified order.
CDDBMETHOD=musicbrainz,cddb,cdtext

# 5 is latin1 output and 6 is UTF8 encoding.
CDDBPROTO=6

#HELLOINFO="`whoami`@`hostname`"
HELLOINFO="fred@bloggs"

CDDBUSELOCAL=n
CDDBCOPYLOCAL=n

## Make a local cache of cddb entries and then volunteer to use
## these entries when and if they match the cd:
#CDDBCOPYLOCAL="y"
#CDDBLOCALDIR="/home/pi/.cddb"
#CDDBLOCALRECURSIVE="y"
#CDDBUSELOCAL="y"

# If NOSUBMIT is set to "y", then abcde will never prompt asking if you
# wish to submit your edited cddb file.
NOSUBMIT=y

# The cd ripping program to use.
CDROMREADERSYNTAX=cdparanoia
CDPARANOIA=cdparanoia
CDPARANOIAOPTS="--never-skip=40"

# Defined as "d" when using cdparanoia with an IDE bus and as
# "g" when using cdparanoia with the ide-scsi emulation layer.
CDPARANOIACDROMBUS=d
#CDPARANOIACDROMBUS=g

# Can be: cddb, cue, read, normalize, encode, tag, move, replaygain, playlist, getalbumart, embedalbumart, clean, default
# The default actions that abcde will take.
# Note: 'embedalbumart' is done later on in 'post_encode()'.
# Note: even though 'tag' is not enabled, 'move' enables tagging. Why oh why oh why?
#ACTIONS=cddb,read,encode,getalbumart,embedalbumart,tag,move,clean
ACTIONS=cddb,read,encode,getalbumart,move,clean

# The location of the CD identification program.
CDDISCID=cd-discid

#MKCUE=mkcue
#CUEREADERSYNTAX="mkcue"
#MKCUEOPTS=""

# Remove the wav files after the encoding has finished.
KEEPWAVS=n

PADTRACKS=y				# Makes tracks 01 02 not 1 2

INTERACTIVE=n

# Flac encoder.
FLACENCODERSYNTAX=flac
FLAC=flac
# See flac -H for options.
# --verify -> Verify a correct encoding by decoding the output in parallel and comparing to the original.
FLACOPTS='--silent --exhaustive-model-search --verify --compression-level-8'

# Musepack encoder.
MPCENCODERSYNTAX=mpcenc
MPCENC=mpcenc
# See mpcenc --longhelp for options.
# --extreme        (--quality 6.00)   (~ 210 kbps)
# --insane         (--quality 7.00)   (~ 240 kbps)
# --braindead      (--quality 8.00)   (~ 270 kbps)
# above braindead  (--quality 9.00)   (~ 300 kbps)
# above braindead  (--quality 10.00)  (~ 350 kbps)
# Note: This uses 'abcde' version of genre.
MPCENCOPTS='--quality 8.00 --artist "${DARTIST}" --album "${DALBUM}" --tag "track=${TRACKNUM}" --tag "filename=${TRACKNAME}" --tag "year=${CDYEAR}" --tag "genre=${CDGENRE}"'

# Mp3 encoder.
MP3ENCODERSYNTAX=lame			# Specify encoder for MP3
LAME=lame				# Path to MP3 encoder
# See lame --longhelp for options.
LAMEOPTS='-m j -b 320 --silent'		# Options for MP3. Joint stereo, silent

# Search engine for music related meta data.
GLYRC=glyrc
#GLYRCOPTS="--formats jpg;jpeg"

# -v --verbosity <integer>
#
# The verbosity level that is used by libglyr:
#
#	0 = No output, but fatal errors.
#	1 = Basic warnings.
#	2 = Normal informal output
#	3 = Basic debug output
#	4 = Full debug output

# -i --minsize

CONVERT=convert
ALBUMARTFILE="cover.jpg"
# Can only have one option here of: png, jpeg, tiff or jpg.
ALBUMARTTYPE="jpg"

# By default convert is only called when the image type is different from
# ALBUMARTTYPE, use ALBUMARTALWAYSCONVERT="y" to always call convert
#ALBUMARTALWAYSCONVERT="y"

# Options for convert/ImageMagick commands used by album art processing when available
# For example: CONVERTOPTS="-colorspace RGB -resize 600x600>"
# to make the image RGB and fit inside 600x600 while keeping the aspect ratio
#IDENTIFYOPTS=
#CONVERTOPTS=
CONVERTOPTS="-resize 600x600>"
#DISPLAYCMDOPTS="-resize 512x512 -title abcde_album_art"

# Implies 'eyeD3'.
#ID3TAGV=id3v2.4

EYED3=eyeD3
#EYED3OPTS="--encoding utf16"
EYED3OPTS="--quiet"

EJECT=eject
#EJECTOPTS=""

# Leave it set as 'n'. This will ensure that the cdrom will not be ejected by 'abcde'
# so you cannot put in another cd until the encoding process has finished.
# It will be ejected by 'cd-rip-and-or-play.sh'.
EJECTCD="n"

CDSPEED=eject
#CDSPEEDOPTS=""

# Output directory.
# Overridden by 'pre_read()'.
OUTPUTDIR=""

# Overridden by 'pre_read()'.
#CDROM="/dev/cdrom"

# The location where the ripped CD information is stored.
# Overridden by 'pre_read()'.
DISCIDHOMEDIR=""

# Rip to tmpfs (RAM disk) for fastest rips.
# Overridden by 'pre_read()'.
#WAVOUTPUTDIR="/tmp"
#WAVOUTPUTDIR="/run"
WAVOUTPUTDIR=""

# NOTE: Use single quotes (') for the variables OUTPUTFORMAT, VAOUTPUTFORMAT, PLAYLISTFORMAT and VAPLAYLISTFORMAT.
#
# Decide here how you want the tracks labelled for a standard 'single-artist',
# multi-track encode and also for a multi-track, 'various-artist' encode:
# Allowed variables are OUTPUT, GENRE, ALBUMFILE, ARTISTFILE, TRACKFILE, TRACKNUM, and YEAR.
# TRACKNUM is automatically zero-padded when the number of encoded tracks is higher than 9.
# The dash between TRACKNUM and TRACKFILE is needed otherwise the cover file will be in the wrong directory.
OUTPUTFORMAT='${ARTISTFILE}/${ALBUMFILE}/${TRACKNUM}-${TRACKFILE}'

# The dash between TRACKNUM and TRACKFILE is needed otherwise the cover file will be in the wrong directory.
VAOUTPUTFORMAT='Various Artists/${ALBUMFILE}-${TRACKNUM} ${ARTISTFILE} ${TRACKFILE}'

# Decide here how you want the tracks labelled for a standard 'single-artist',
# single-track encode and also for a single-track 'various-artist' encode.
# (Create a single-track encode with 'abcde -1' from the commandline.)
ONETRACKOUTPUTFORMAT='${ARTISTFILE}/${ALBUMFILE}/${ARTISTFILE} - ${ALBUMFILE}'

VAONETRACKOUTPUTFORMAT='$VAOUTPUTFORMAT'

# Create playlists for single and various-artist encodes.
# I would suggest commenting these out for single-track encoding.
PLAYLISTFORMAT='${ARTISTFILE}/${ALBUMFILE}/${ALBUMFILE}.m3u'
VAPLAYLISTFORMAT='${ARTISTFILE}/${ALBUMFILE}/${ALBUMFILE}.m3u'

# 0, 1 or 2.
# Overridden by 'pre_read()'.
EXTRAVERBOSE=0



# This function takes out dots preceding the album name, and removes a grab
# bag of illegal characters. It allows spaces, if you do not wish spaces add
# in -e 's/ /_/g' after the first sed command.
mungefilename() {
	echo "$@" | sed -e 's/^\.*//' | tr -d ":><|*/\"'?[:cntrl:]"
###	echo "$@" | sed -e 's/^\.*//' | tr -d ":><|*/\"'?[:cntrl:]" | tr "[:upper:]" "[:lower:]"
}



# VARIANT 1: (works anywhere style)
#
# Translate everything to lowercase
# replace ALL chars that may cause trouble for Linux, Windows and DOS
# with '_' (underscore); remove double underscores; remove leading and
# trailing underscores; recode to flat ASCII. WARNING! You'll likely
# need to install "recode" on your system as an extra package to use
# this.
#
#mungefilename() {
#	echo "$@" | tr [A-Z] [a-z] | \
#			sed "s/[- ,.:\'\/!@#\?\$%\^&()]/_/g" | \
#			sed 's/_[_]*/_/g' | \
#			sed 's/^_*//' | \
#			sed 's/_*$//' | \
#			recode -f iso8859-1..flat
#
# VARIANT 2: (legible style)
#
# Accept all chars, EXCEPT '/' (obvious) or ":" (because eyeD3 cannot
# cope with ":" in pathnames): replace them with " " (space).
# Additionally, replace contiguous spaces with one space; strip
# leading spaces; strip trailing spaces and recode to flat filenames.
#
#mungefilename() {
#      echo "$@" |     sed "s/[:\/]/ /g" | \
#		       sed 's/ [ ]*/ /g' | \
#		       sed 's/^ *//' | \
#		       sed 's/ *$//' | \
#		       recode -f iso8859-1..flat
#}
#
# Custom filename munging specific to track names:
# By default this function will call the mungefilename function.
#mungetrackname() {
#	mungefilename $@
#}
#
# Custom filename munging specific to artist names:
# By default this function will call the mungefilename function.
#mungeartistname() {
#	mungefilename $@
#}
#
# Custom filename munging specific to album names:
# By default this function will call the mungefilename function.
#mungealbumname() {
#	mungefilename $@
#}



# Custom genre munging:
mungegenre() {
##	# Display where we were called from.
##	echo "mungegenre : ${FUNCNAME[1]} : Line ${BASH_LINENO[0]} : '${CDGENRE}'" >> ${LOGFILE}

	# Convert all the genre to lowercase.
	CDGENRE="${CDGENRE,,}"

##	# Uppercase the first character only.
##	CDGENRE="${CDGENRE^}"

	# Uppercase the first character of each word.
	CDGENRE=( $CDGENRE )		# Without quotes
	CDGENRE="${CDGENRE[@]^}"

	DBG_ECHO "Genre : '${CDGENRE}'"

	# Return the genre.
	echo "${CDGENRE}"
}



# Local functions.

# Some tagging services return no genre. Worst still, one of my albums comes back with "progressive rock" but
# 'abcde' does not recognise this or even some other genres. The problem is in the function 'do_getgenreid()'.
# This means that the music file will have no genre tag embedded into it even though the likes of 'eyeD3' and
# 'metaflac' can accept any string being tagged as a genre.
# This function is used to return the genre as 'other' as a default if there is no genre returned from any of
# the tagging services. It can also be used to convert a genre to a non-standard user defined genre if there
# is a text file with the list of genres to convert. See 'GENRES_TO_CONVERT_FILE'.
#
GET_GENRE_AND_YEAR() {
##	# Display where we were called from.
##	echo "${FUNCNAME[1]} : Line ${BASH_LINENO[0]} : '${@}'" >> ${LOGFILE}

	if [[ -z ${CDGENRE} || -z "CDYEAR" ]]; then
		local	_COUNTER
		local	_DATA
		local	_GENRE
		local	_YEAR
		local	_LOOP

		DBG_ECHO "Finding CDGENRE and CDYEAR."

		# 'NUM_CDDB_MATCHES' comes from 'abcde'.
		DBG_ECHO "Number of matches to look through: ${NUM_CDDB_MATCHES}"

		# Look through all the 'abcde' tagging services to find a genre.
		_COUNTER=1
		while [ $_COUNTER -le $NUM_CDDB_MATCHES ]; do
			# /run/abcde.520cd708/cddbread.1
			_DATA="${ABCDETEMPDIR}/cddbread.$_COUNTER"

			DBG_ECHO "Looking in: ${_DATA}"

			let _COUNTER=_COUNTER+1

			# If no CDGENRE defined by 'abcde'.
			if [ -z "${CDGENRE}" ]; then
				# Look in the tagging service file for a genre.
				_GENRE="$(grep -a ^DGENRE= "$_DATA" | cut -f2- -d= )"

				_GENRE=${_GENRE//$'\r'}		# Remove the carriage return character

				# If found a genre in one of the 'cddbread.X' files.
				if [ -n "${_GENRE}" ]; then
					_GENRE="${_GENRE,,}"	# Convert the genre to lowercase

					# See if the user has provided a genre conversion file.
					# The list is in an external file and is in the format of: "cd genre to convert","abcde genre"
					if [[ "0" -ne "${GENRE_MAP_COUNT}" ]]; then
						DBG_ECHO "Genre conversion item count: ${GENRE_MAP_COUNT}"
						DBG_ECHO "Looking for: '${_GENRE}'"

						_LOOP=0
						while [ "$_LOOP" -lt "${GENRE_MAP_COUNT}" ]; do
							# 'GENRES_MAP_FROM_CD' is an array of: "From cd genre"
							# 'GENRES_MAP_TO_ABCDE' is an array of: "To abcde genre"

							#DBG_ECHO "From -> ${GENRES_MAP_FROM_CD[$_LOOP]}"

							# If a match is found, convert it to the 'abcde' genre.
							if [[ "${GENRES_MAP_FROM_CD[$_LOOP]}" == "${_GENRE}" ]]; then

								_GENRE="${GENRES_MAP_TO_ABCDE[${_LOOP}]}"

								DBG_ECHO "Changing genre from: '${GENRES_MAP_FROM_CD[$_LOOP]}' to: '${_GENRE}'"

								break	# Break out of the while loop if a match has been found
							fi

							let _LOOP+=1	# Not found so try the next entry
						done	# End of 'while [ "$_LOOP" -lt "${GENRE_MAP_COUNT}" ]; dow
					fi		# End of 'if [[ "0" -ne "${GENRE_MAP_COUNT}" ]]; then'

					###_GENRE="${_GENRE^}"		# Uppercase the first character only

					# Uppercase the first character of each word.
					_GENRE=( $_GENRE )	# Without quotes
					_GENRE="${_GENRE[@]^}"

					DBG_ECHO "Found  : '${_GENRE}'"

					# Fill in the genre fields for 'abcde'.
					GENRE="${_GENRE}"
					CDGENRE="${_GENRE}"
				fi	# End of 'if [ -n "${_GENRE}" ]; then'
			fi		# End of 'if [ -z "${CDGENRE}" ]; then'

			# If no CDYEAR defined.
			if [ -z "${CDYEAR}" ]; then
				_YEAR="$(grep -a ^DYEAR= "$_DATA" | cut -f2- -d= )"
				_YEAR=${_YEAR//$'\r'}		# Remove the carriage return character

				# If found a year.
				if [ -n "${_YEAR}" ]; then
					DBG_ECHO "Found: ${_YEAR}"

					CDYEAR="${_YEAR}"
				fi
			fi

			# If we have the genre and year fields.
			if [[ -n "${CDGENRE}" && -n "${CDYEAR}" ]]; then
				DBG_ECHO "Artist : '${DARTIST}'"
				DBG_ECHO "Album  : '${DALBUM}'"
				DBG_ECHO "Year   : '${CDYEAR}'"
				DBG_ECHO "Genre  : '${GENRE}'"
				DBG_ECHO "Cdgenre: '${CDGENRE}'"

				break				# we have the genre and year fields so break out of the while loop
			fi
		done						# End of 'while [ $_COUNTER -le $NUM_CDDB_MATCHES ]; do'

		# If we still have no genre then use a default.
		if [[ -z ${CDGENRE} ]]; then
			CDGENRE="Unknown"			# The default genre if none found
			GENRE="${CDGENRE}"

			DBG_ECHO "No genre found. Using a default of: ${CDGENRE}"
		fi

		DBG_ECHO "Finding genre and year done..."
	fi	# End of 'if [[ -z ${CDGENRE} || -z "CDYEAR" ]]; then'
}



# Remove leading and trailing spaces.
TRIM_SPACE() {
	echo $*
}



ADD_LAST_SLASH() {
	if [[ "/" == "${1: -1}" ]]; then
		# Already added.
		echo "${1}"
	else
		# Add the last slash.
		echo "${1}/"
	fi
}



REMOVE_LAST_SLASH() {
	 echo "${1%/}"
}



DBG_ECHO() {
	if [ "2" -eq "${EXTRAVERBOSE}" ]; then
		echo "${1}" >> ${LOGFILE}
#		_log_debug "${1}"
	fi
}



DBG_LS() {
	if [ "2" -eq "${EXTRAVERBOSE}" ]; then
		ls -la "${1}" >> ${LOGFILE}
	fi
}



# A shell function which is executed before the CDROM is read for the first time, during abcde execution.
# It can be used to:
#	* Close the CD tray using eject -t (if available in eject and supported by your CD device.
#	* Set the CD speed. You can also use the built-in options, but you can also
#		set it here. In Debian, eject -x and cdset -x do the job.
# KEEP IN MIND that executables included in pre_read must be in your $PATH or
# you have to define them with full /path/to/binary
pre_read() {
# These constants used for '_LOG_LEVEL' are exported by 'cd-rip-and-or-play.sh'.
#
#	LOG_LEVEL_NOLOG
#	LOG_LEVEL_FATAL
#	LOG_LEVEL_ERROR
#	LOG_LEVEL_WARN
#	LOG_LEVEL_OK
#	LOG_LEVEL_LOG
#	LOG_LEVEL_DEBUG
#
# These variables are exported by 'cd-rip-and-or-play.sh'.
#
#	_LOG_LEVEL
#	CDROM			# Usually /dev/cdrom
#	RIPPED_MUSIC_OWNER	# 'pi:pi'
#	MUSIC_DIR		# '/var/lib/mpd/music/SDCARD/CD' or '/var/lib/mpd/music/USB/CD'.
#	MUSIC_SUB_DIR		# '' or 'CD'
#	_G_DISCID_DIR		# '/home/pi/Music-CD/.Music CDs Ripped'
#	TEMP_DIR		# '/run'
#	LOGFILE			# '/var/log/${_SCRIPTNAME}.log'
#	GENRES_TO_CONVERT_FILE
#	_DEFAULT_CD_COVER	# '/home/pi/Src/cd-rip/default-cd-cover.jpg'



DBG_ECHO ""
DBG_ECHO ""



# 0...6 ie LOG_LEVEL_NOLOG, LOG_LEVEL_FATAL, LOG_LEVEL_ERROR,
#    LOG_LEVEL_WARN, LOG_LEVEL_OK, LOG_LEVEL_LOG, LOG_LEVEL_DEBUG
case ${_LOG_LEVEL} in
	"${LOG_LEVEL_NOLOG}")		EXTRAVERBOSE=0		;;
	"${LOG_LEVEL_FATAL}")		EXTRAVERBOSE=1		;;
	"${LOG_LEVEL_ERROR}")		EXTRAVERBOSE=1		;;
	"${LOG_LEVEL_WARN}")		EXTRAVERBOSE=1		;;
	"${LOG_LEVEL_OK}")		EXTRAVERBOSE=1		;;
	"${LOG_LEVEL_LOG}")		EXTRAVERBOSE=1		;;
	"${LOG_LEVEL_DEBUG}")		EXTRAVERBOSE=2		;;
	*)				EXTRAVERBOSE=0		;;
esac

#EXTRAVERBOSE=2

# This is already exported by 'cd-rip-and-or-play.sh'.
# CDROM=/dev/cdrom
CDROM=$(REMOVE_LAST_SLASH "${CDROM}")

# OUTPUTDIR="/home/pi/Music-CD"
# /var/lib/mpd/music/My CDs
OUTPUTDIR=$(REMOVE_LAST_SLASH "${MUSIC_DIR}")

### Not used.
### CD/
### $(ADD_LAST_SLASH "${MUSIC_SUB_DIR}")

# The location where the ripped CD information is stored.
# DISCIDHOMEDIR="/home/pi/Music-CD/.Music CDs Ripped/"
DISCIDHOMEDIR=$(ADD_LAST_SLASH "${_G_DISCID_DIR}")

# WAVOUTPUTDIR="/run"
WAVOUTPUTDIR=$(REMOVE_LAST_SLASH "${TEMP_DIR}")

### Not used.
### /var/log/cd-rip-and-or-play.log

DBG_ECHO "ExtraVerbose  : ${EXTRAVERBOSE}"
DBG_ECHO "Cdrom         : ${CDROM}                                           # /dev/cdrom"
DBG_ECHO "OutputDir     : ${OUTPUTDIR}                            # /var/lib/mpd/music/My CDs"
DBG_ECHO "DiscIdHomeDir : ${DISCIDHOMEDIR}         # /var/lib/mpd/music/My CDs/.Music CDs Ripped/"
DBG_ECHO "WavOutputDir  : ${WAVOUTPUTDIR}                                                 # /run"
DBG_ECHO "Default cover : ${_DEFAULT_CD_COVER}             # /home/pi/Src/cd-rip/default-cd-cover.jpg"
DBG_ECHO ""

if [ -s "${GENRES_TO_CONVERT_FILE}" ]; then		# If a genre conversion file exists and is not empty
	DBG_ECHO "Genre conversion : ${GENRES_TO_CONVERT_FILE}"
else
	DBG_ECHO "Genre conversion file not found: ${GENRES_TO_CONVERT_FILE}"
fi

DBG_ECHO ""



# If the output directory has not been specified.
if [ -z "${OUTPUTDIR}" ]; then
	# Look for the music directory that is specified in mpd.conf.

	DBG_ECHO "Looking in '/etc/mpd.conf' for the music directory."

	# Read the file in row mode and extract each line.
	while IFS= read -r LINE; do
		#  music_directory	"/var/lib/mpd/music"
		_KEY=${LINE% *}
		_VALUE=${LINE##* }

		if [ "${_KEY}" == "music_directory" ]; then
			# Remove the " character from the start and end of the value token.
			_VALUE=${_VALUE#\"}
			_VALUE=${_VALUE%\"}

			# Returns: /var/lib/mpd/music/SDCARD/CD
			OUTPUTDIR="${_VALUE}/SDCARD/CD"
		fi
	done < "/etc/mpd.conf"
fi

# If no music directory found.
if [ -z "${OUTPUTDIR}" ]; then
	echo "ERROR: Cannot find the music directory." >> ${LOGFILE}

	exit -1
fi

DBG_ECHO "Using music directory: ${OUTPUTDIR}"



# This should not be needed because CDROM has already been defined in 'cd-rip-and-or-play.sh'.
# If the cdrom path has not been defined or cannot find the cdrom path.
if [[ ( -z "${CDROM}" ) || ( ! -e ${CDROM} ) ]]; then
	DBG_ECHO "Searching for the cdrom drive."

	sleep 5			# Does it really need to be this long???

	# Find out which device the CDROM appears as.
	CDROM=/dev/cdrom
	CDPATH=/dev/sr

	if [ -e ${CDPATH}0 ]; then
		CDROM=${CDPATH}0
	fi

	if [ -e ${CDPATH}1 ]; then
		CDROM=${CDPATH}1
	fi
fi

DBG_ECHO "Using CDROM drive    : ${CDROM}"
DBG_ECHO ""

chmod 644 "${CDROM}"



# Read the genre conversion file if it exists.
GENRE_MAP_COUNT=0
GENRES_MAP_FROM_CD=()					# This is an array of: "From cd genre"
GENRES_MAP_TO_ABCDE=()					# This is an array of: "To abcde genre"

if [ -s "${GENRES_TO_CONVERT_FILE}" ]; then		# If a genre conversion file exists and is not empty
	local	_LOOP

	DBG_ECHO ""
	DBG_ECHO "Reading the genre conversion file: ${GENRES_TO_CONVERT_FILE}"

	# The conversion file list is an external file and has fields in the format of: "cd genre to convert","abcde genre"
	while IFS='=' read -r _LHS _RHS; do
		if [[ ! $_LHS =~ ^\ *# && -n $_LHS ]]; then
			_LHS=$(TRIM_SPACE "${_LHS}")	# Delete leading and trailing whitespaces.
			_RHS=$(TRIM_SPACE "${_RHS}")

			_RHS="${_RHS%%\#*}"		# Delete in line right comments
			_RHS=$(TRIM_SPACE "${_RHS}")	# In case the comment had a leading whitespace

			_LHS=${_LHS#"\""}		# Remove leading "
			_LHS=${_LHS%"\""}		# Remove trailing "

			_RHS=${_RHS#"\""}		# Remove leading "
			_RHS=${_RHS%"\""}		# Remove trailing "

			_LHS="${_LHS,,}"		# Convert to lower case
			_RHS="${_RHS,,}"		# Convert to lower case

			DBG_ECHO "Got: '${_LHS}' : '${_RHS}'"

			GENRES_MAP_FROM_CD+=("$_LHS")
			GENRES_MAP_TO_ABCDE+=("$_RHS")
	        fi
	done < "${GENRES_TO_CONVERT_FILE}"

	GENRE_MAP_COUNT=${#GENRES_MAP_FROM_CD[@]}	# Get the number of genres that can be converted

	# Display the conversion list.
	if [ "2" -eq "${EXTRAVERBOSE}" ]; then
		DBG_ECHO ""
		DBG_ECHO "${GENRE_MAP_COUNT} genres that can be converted."
		DBG_ECHO ""

		_LOOP=0
		while [ "${_LOOP}" -lt "${GENRE_MAP_COUNT}" ]; do
			DBG_ECHO "'${GENRES_MAP_FROM_CD[${_LOOP}]}' -> '${GENRES_MAP_TO_ABCDE[${_LOOP}]}'"

			let _LOOP+=1
		done

		DBG_ECHO ""
	fi
fi



sleep 0.5
}



# A shell function which is executed after the CDROM is read (and, if applies, before the CDROM is ejected).
# It can be used to read a TOC from the CDROM, or to try to read the DATA areas from the CD (if any exist).
# KEEP IN MIND that executables included in pre_read must be in your $PATH or you have to define them
# with full /path/to/binary
post_read() {
# NOTE: echo does not work the same as in 'post_encode'.
# You can only echo to a file.

	DBG_ECHO "In post_read()"

	DBG_ECHO "Artistfile: ${ARTISTFILE}"
	DBG_ECHO "Albumfile : ${ALBUMFILE}"
	DBG_ECHO "Trackfile : ${TRACKFILE}"		# Empty
	DBG_ECHO "Dartist   : ${DARTIST}"
	DBG_ECHO "Dalbum    : ${DALBUM}"
	DBG_ECHO "Cdyear    : ${CDYEAR}"
	DBG_ECHO "Genre     : ${GENRE}"			# Empty
	DBG_ECHO "Cdgenre   : ${CDGENRE}"		# Empty

	DBG_ECHO "In post_read() done..."
}



# A shell function which is executed after the encoding process.
# It can be used to:
#	* Move the resulting directory to another location or over the network.
#	* Compare results with a previously made run, for tests
# KEEP IN MIND that executables included in post_encode must be in your $PATH or
# you have to define them with full /path/to/binary
post_encode() {
if [ -d "${OUTPUTDIR}/${DARTIST}/${DALBUM}" ]; then
	# If the artist is unknown then append the cddb disc id to make it unique.
	if [[ "Unknown Artist" == "${DARTIST}" ]]; then
		ARTISTFILE="${DARTIST} ${CDDBDISCID}"

		# Rename the 'unknown artist' directory to 'unknown artist cddb disc id' directory.
		mv -f "${OUTPUTDIR}/${DARTIST}" "${OUTPUTDIR}/${ARTISTFILE}"

		RV=${?}

		# If failed to rename the directory.
		if [ 0 -ne "${RV}" ]; then
			echo "ERROR: Cannot rename '${OUTPUTDIR}/${DARTIST}' directory to '${OUTPUTDIR}/${ARTISTFILE}'" >> ${LOGFILE}

			exit -2
		fi

		DBG_ECHO ""
		DBG_ECHO "Renamed '${OUTPUTDIR}/${DARTIST}' directory to '${OUTPUTDIR}/${ARTISTFILE}'"

		DARTIST="${ARTISTFILE}"
	fi

	DBG_ECHO ""
	DBG_ECHO ""

	# We should be in: /var/lib/mpd/music/My CDs/Metallica/Master Of Puppets
	# but we are actually in: /home/pi/Src/cd-rip

	cd "${OUTPUTDIR}/${DARTIST}/${DALBUM}"		# Ensure we are in the music directory

	DBG_ECHO "Changing directory mode to 755"

	chmod 755 "${OUTPUTDIR}/${DARTIST}"
	chmod 755 "${OUTPUTDIR}/${DARTIST}/${DALBUM}"

	DBG_ECHO "Changing directory owner to ${RIPPED_MUSIC_OWNER}"

	chown "${RIPPED_MUSIC_OWNER}" "${OUTPUTDIR}/${DARTIST}"
	chown "${RIPPED_MUSIC_OWNER}" "${OUTPUTDIR}/${DARTIST}/${DALBUM}"

	DBG_ECHO ""
	DBG_ECHO ""

	GET_GENRE_AND_YEAR				# Ensure we have a genre and year

	DBG_ECHO ""
	DBG_ECHO ""

	DBG_ECHO "Outputdir:    ${OUTPUTDIR}"		# /var/lib/mpd/music/My CDs
	DBG_ECHO ""
	DBG_ECHO "CDDB discid:  ${CDDBDISCID}"		# 520cd708
	DBG_ECHO ""
###	DBG_ECHO "Artistfile:   ${ARTISTFILE}"		# Empty
###	DBG_ECHO "Albumfile:    ${ALBUMFILE}"		# Empty
###	DBG_ECHO "Trackfile:    ${TRACKFILE}"		# Empty
	DBG_ECHO "Dartist:      ${DARTIST}"		# Metallica
	DBG_ECHO "Dalbum:       ${DALBUM}"		# Master Of Puppets
	DBG_ECHO "CD year:      ${CDYEAR}"		# 1986
	DBG_ECHO "CD genre:     ${CDGENRE}"		# Metal
	DBG_ECHO "Genre:        ${GENRE}"		# Metal
	DBG_ECHO "Tracks:       ${TRACKS}"		# 08
###	DBG_ECHO "Track num:    ${TRACKNUM}"
###	DBG_ECHO "Track name:   ${TRACKNAME}"		# The last track name that 'abcde' processed
	DBG_ECHO "Track artist: ${TRACKARTIST}"		# Metallica

	DBG_ECHO ""
	DBG_ECHO ""

	# If the disc id directory does not exist, create it.
	# /var/lib/mpd/music/My CDs/.Music CDs Ripped
	if [ ! -d "${DISCIDHOMEDIR}" ]; then
		DBG_ECHO "Creating: ${DISCIDHOMEDIR}"
		DBG_ECHO ""

		mkdir "${DISCIDHOMEDIR}"		# Create the CD disc id playlist directory

		chmod 755 "${DISCIDHOMEDIR}"

		chown "${RIPPED_MUSIC_OWNER}" "${DISCIDHOMEDIR}"
	fi

	# We should still be in: /var/lib/mpd/music/My CDs/Metallica/Master Of Puppets

	DBG_LS "."

	# For each output format.
	for _OTYPE in $(echo "$OUTPUTTYPE" | tr , \ ); do
		# /var/lib/mpd/music/My CDs/.Music CDs Ripped/520cd708 - Metallica - Master Of Puppets
		TARGETDISCIDFILE="${DISCIDHOMEDIR}${CDDBDISCID} - ${DARTIST} - ${DALBUM}"

		DBG_ECHO ""
		DBG_ECHO "Creating the ripped disc id file: ${TARGETDISCIDFILE}._${_OTYPE}"

		touch "${TARGETDISCIDFILE}._${_OTYPE}"

		chmod 644 "${TARGETDISCIDFILE}._${_OTYPE}"

		chown "${RIPPED_MUSIC_OWNER}" "${TARGETDISCIDFILE}._${_OTYPE}"

		# Write the header.
		echo "${DARTIST}
${DALBUM}
${CDYEAR}
${GENRE}
############################################################
" > "${TARGETDISCIDFILE}._${_OTYPE}"



# Metallica
# Master Of Puppets
# 1986
# Metal
# ############################################################
#
# Metallica/Master Of Puppets/(Metallica) Master Of Puppets - 01) Battery.mp3
# Metallica/Master Of Puppets/(Metallica) Master Of Puppets - 02) Master Of Puppets.mp3
# Metallica/Master Of Puppets/(Metallica) Master Of Puppets - 03) The Thing That Should Not Be.mp3
# Metallica/Master Of Puppets/(Metallica) Master Of Puppets - 04) Welcome Home (Sanitarium).mp3
# Metallica/Master Of Puppets/(Metallica) Master Of Puppets - 05) Disposable Heroes.mp3
# Metallica/Master Of Puppets/(Metallica) Master Of Puppets - 06) Leper Messiah.mp3
# Metallica/Master Of Puppets/(Metallica) Master Of Puppets - 07) Orion (Instrumental).mp3
# Metallica/Master Of Puppets/(Metallica) Master Of Puppets - 08) Damage, Inc..mp3



		# Rename the tracks.
		DBG_ECHO ""
		DBG_ECHO "Renaming tracks..."

		for FILE in *.${_OTYPE}; do			# For each file of this output format
			if [ -e "${FILE}" ]; then		# If the file exists
				DBG_ECHO ""

				# This takes care of the situation where a multi-disc set is being ripped
				# into a directory that already has tracks in it that have been renamed.
				# (artist) album - 01) track.${_OTYPE}
				if [[ "$FILE" == "(${DARTIST}) ${DALBUM}"*."${_OTYPE}" ]]; then
					# The track has been renamed.
					DBG_ECHO "Skipping rename of file: ${FILE}"
				else
					# The track has not been renamed.
					TRK=$(echo ${FILE} | cut -d'-' -f1 -)
					NAM=$(echo ${FILE} | cut -d'-' -f2- -)

					SRC="${FILE}"
					DST="(${DARTIST}) ${DALBUM} - ${TRK}) ${NAM}"

					DBG_ECHO "The next file to rename is: ${FILE}"		# 01-Battery.mp3
					DBG_ECHO "SRC: ${SRC}"					# 01-Battery.mp3
					DBG_ECHO "DST: ${DST}"					# (Metallica) Master Of Puppets - 01) Battery.mp3
					DBG_ECHO "Trk: ${TRK}"					# 01
					DBG_ECHO "Nam: ${NAM}"					# Battery.mp3		With file extension

					mv -f -T "${SRC}" "${DST}"

					RV=${?}

					# If success.
					if [ 0 -eq "${RV}" ]; then
						# Do the tagging here to overcome the limited genre tagging by 'abcde'.
						# Only works for mp3 and flac files.

						# Use a default cover file if the artist is unknown.
						if [[ "Unknown Artist" == "${TRACKARTIST}" ]]; then
							DBG_ECHO "Copying: ${_DEFAULT_CD_COVER} to ${ALBUMARTFILE}"
							cp -n -T "${_DEFAULT_CD_COVER}" "${ALBUMARTFILE}"
						fi

						case "${_OTYPE}" in
							mp3)
								TRACKNAME="${NAM%.mp3}"		# Track name without the file extension

								DBG_ECHO "Tagging mp3 track: ${TRK} -> ${TRACKNAME}"

								TPE2=""
								if [ "y" = "$VARIOUSARTISTS" ]; then
									TPE2="Various"
								fi

								# Lifted from 'abcde'.
								addopts=( \
									${ENCODING:+--encoding=utf16} \
									${TPE2:+--text-frame=TPE2:"$TPE2"} \
									${CDYEAR:+--text-frame="TDRC:$CDYEAR"}
									# We set 'recording-date' so the date tag will show
									# in Audacious, vlc and friends...           Andrew.
									#${COMMENTOUTPUT:+--comment "$COMMENTOUTPUT"} \
									)

								if [ "2" -eq "${EXTRAVERBOSE}" ]; then
									DBG_ECHO "$TRACKARTIST - $DALBUM - $TRACKNAME - $CDGENRE"

									eyeD3 $TAGGEROPTS \
										--preserve-file-times \
										-A "$DALBUM" \
										-a "$TRACKARTIST" \
										-t "$TRACKNAME" \
										-G "$CDGENRE" \
										-n "${TRK:-${TRK}}" \
										${TRACKNUM:+-N "$TRACKS"} \
										"${addopts[@]}" \
										--add-image "$ALBUMARTFILE":FRONT_COVER \
										"${DST}"
								else
									eyeD3 $TAGGEROPTS \
										--preserve-file-times \
										-A "$DALBUM" \
										-a "$TRACKARTIST" \
										-t "$TRACKNAME" \
										-G "$CDGENRE" \
										-n "${TRK:-${TRK}}" \
										${TRACKNUM:+-N "$TRACKS"} \
										"${addopts[@]}" \
										--add-image "$ALBUMARTFILE":FRONT_COVER \
										"${DST}" > /dev/null
								fi
							;;

							flac)
#								# Lifted from 'abcde'.
#								# TRACKTOTAL is not in the proposed, minimal list of standard field names from
#								# xiph.org: https://www.xiph.org/vorbis/doc/v-comment.html but is in common usage
#								# and read by mediainfo, ffprobe, vlc, Aqualung, ogg123, Foobar. And now abcde :)
#								# The tag is quietly ignored by  Audacious, MPlayer, mpv, XMMS....
#								echo TRACKTOTAL="${TRACKS}"
#
#								if [ -n "$DISCNUMBER" ]; then
#									echo DISCNUMBER="$DISCNUMBER"
#								fi

								TRACKNAME="${NAM%.flac}"	# Track name without the file extension

								DBG_ECHO "Tagging flac track: ${TRK} -> ${TRACKNAME}"

								metaflac --no-utf8-convert \
									--preserve-modtime \
									--remove-all-tags \
									--import-picture-from="3||||$ALBUMARTFILE" \
									--set-tag="ARTIST=$TRACKARTIST" \
									--set-tag="ALBUM=$DALBUM" \
									--set-tag="TITLE=$TRACKNAME" \
									--set-tag="DATE=$CDYEAR" \
									--set-tag="GENRE=$CDGENRE" \
									--set-tag="TRACKNUMBER=${TRK:-${TRK}}" \
									--set-tag="TRACKTOTAL=${TRACKS}" \
									--set-tag="CDDB=${CDDBDISCID}" \
									"${DST}"
							;;

							mpc)
								# Mpc tagging done by 'mpcenc'
								:
							;;
						esac

						DBG_ECHO ""
						DBG_ECHO "Changing file mode..."

						chmod 444 "${DST}"

						DBG_ECHO "Changing owner..."

						chown "${RIPPED_MUSIC_OWNER}" "${DST}"

						# Add the filename to the disc id playlist.
						# Metallica/Master Of Puppets/(Metallica) Master Of Puppets - 01) Battery.mp3
						DBG_ECHO "Adding: ${DARTIST}/${DALBUM}/${DST}"

						echo "${DARTIST}/${DALBUM}/${DST}" >> "${TARGETDISCIDFILE}._${_OTYPE}"
					fi	# End of 'if [ 0 -eq "${RV}" ]; then'
				fi		# End of 'if [[ "$FILE" == "(${DARTIST}) ${DALBUM}"*."${_TYPE}" ]]; then'
			fi			# End of 'if [ -e "${FILE}" ]; then'
		done				# End of 'for FILE in *.${_OTYPE}; do'

		if [ -f "${TARGETDISCIDFILE}._${_OTYPE}" ]; then
			# Write protect the cd disc id playlist.
			chmod 444 "${TARGETDISCIDFILE}._${_OTYPE}"

			DBG_ECHO ""
			DBG_ECHO "The ripped disc id has been created: ${TARGETDISCIDFILE}._${_OTYPE}"
		fi
	done		# End of 'for _OTYPE in $(echo "$OUTPUTTYPE" | tr , \ ); do'

	# All the audio files have been renamed.

	# Move 'cover.jpg' cover file to the correct folder.
	# ie:
	#	From:	 /var/lib/mpd/music/My CDs/Metallica/cover.jpg
	#	To:	 /var/lib/mpd/music/My CDs/Metallica/Master Of Puppets/cover.jpg

	# If the cover file exists.
	if [ -f "albumart_backup/${ALBUMARTFILE}" ]; then
		# Move it into the ripped music files directory.
		DBG_ECHO ""
		DBG_ECHO "Moving cover artwork: ${ALBUMARTFILE}"
		mv -f "albumart_backup/$ALBUMARTFILE" "."

		# Remove the backup directory.
		DBG_ECHO "Removing the artwork backup directory: albumart_backup"
		rmdir --ignore-fail-on-non-empty "albumart_backup"
	fi

	# If the cover file has been sucessfully moved.
	if [ -f "$OUTPUTDIR/${DARTIST}/${DALBUM}/${ALBUMARTFILE}" ]; then
		chmod 444 "$OUTPUTDIR/${DARTIST}/${DALBUM}/${ALBUMARTFILE}"
		chown "${RIPPED_MUSIC_OWNER}" "$OUTPUTDIR/${DARTIST}/${DALBUM}/${ALBUMARTFILE}"
	fi

	DBG_ECHO ""
	DBG_ECHO "All ${TRACKS} tracks should have been renamed."
	DBG_ECHO ""

	DBG_LS "${OUTPUTDIR}/${DARTIST}/${DALBUM}"

	DBG_ECHO ""
	# The ripped disc id file should have been created: /var/lib/mpd/music/My CDs/.Music CDs Ripped/520cd708 - Metallica - Master Of Puppets
	DBG_ECHO "The ripped disc id file should have been created: ${TARGETDISCIDFILE}._*"
	DBG_ECHO ""

	DBG_LS "${DISCIDHOMEDIR}"

	DBG_ECHO ""
fi	# End of 'if [ -d "${OUTPUTDIR}/${DARTIST}/${DALBUM}" ]; then'
}
