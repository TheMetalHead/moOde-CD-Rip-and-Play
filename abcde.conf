# https://github.com/johnlane/abcde

# https://www.mankier.com/1/abcde
# http://lly.org/~rcw/abcde/page/abcde.1.html
# https://web.archive.org/web/20161031150419/http://www.andrews-corner.org/abcde.html

# http://lly.org/~rcw/abcde/page/cddb-tool.1.html

# https://github.com/automatic-ripping-machine/automatic-ripping-machine
# https://www.imagetracking.org.uk/2018/08/automatically-ripping-cds-on-linux/
# https://github.com/docPhil99/cdripper
# https://github.com/sahib/glyr



# Use permissions of 644 and owner of root:root

# Support for systems with low disk space:
# n:	Default parallelization (read entire CD in while encoding)
# y:	No parallelization (rip, encode, rip, encode...)
LOWDISK="n"

# Define how many encoders to run at once. This makes for huge speedups
# Defaults to 1.
MAXPROCS=3

# How to access freedb.org 
#
# Configure your CDDB1 or freedb-aware software to point to freedb.freedb.org
# (Random freedb server) as your CDDB/freedb-server.
#
# All official freedb servers are running cddbp at port 8880 and http at port 80.
# The path for http-access is /~cddb/cddb.cgi.

# http://www.freedb.org/en/applications__configuration.8.html

# freedb.org:8880
# freedb-submit@freedb.org

CDDBMETHOD=musicbrainz

# 5 is latin1 output and 6 is UTF8 encoding.
CDDBPROTO=6

#HELLOINFO="`whoami`@`hostname`"
HELLOINFO="fred@bloggs"

#CDDBURL="http://freedb.freedb.org/~cddb/cddb.cgi"

CDDBUSELOCAL="n"
CDDBCOPYLOCAL="n"

## Make a local cache of cddb entries and then volunteer to use
## these entries when and if they match the cd:
#CDDBCOPYLOCAL="y"
#CDDBLOCALDIR="/home/pi/.cddb"
#CDDBLOCALRECURSIVE="y"
#CDDBUSELOCAL="y"

# If NOSUBMIT is set to "y", then abcde will never prompt asking if you
# wish to submit your edited cddb file.
NOSUBMIT="y"

# The cd ripping program to use.
CDROMREADERSYNTAX=cdparanoia
CDPARANOIA=cdparanoia			# The path
CDPARANOIAOPTS="--never-skip=40"

# Defined as "d" when using cdparanoia with an IDE bus and as
# "g" when using cdparanoia with the ide-scsi emulation layer.
CDPARANOIACDROMBUS="d"
#CDPARANOIACDROMBUS="g"

# Can be: cddb, cue, read, normalize, encode, tag, move, replaygain, playlist, getalbumart, embedalbumart, clean, default

# The default actions that abcde will take.
#ACTIONS=cddb,read,getalbumart,encode,embedalbumart,tag,cue,move,clean

#ACTIONS=cddb,read,encode,embedalbumart,tag,clean,move
ACTIONS=cddb,embedalbumart,read,encode,tag,move,clean

# cddb,getalbumart,read,encode,tag,move,clean 

# The location of the CD identification program.
CDDISCID=cd-discid

#MKCUE=mkcue
#CUEREADERSYNTAX="mkcue"
#MKCUEOPTS=""

KEEPWAVS="n"

# Activate the lame's --nogap option, that allows files found in CDs with no
# silence between songs (such as live concerts) to be encoded without noticeable gaps. 
#NOGAP="y"

PADTRACKS="y"				# Makes tracks 01 02 not 1 2

INTERACTIVE="n"

MP3ENCODERSYNTAX=lame			# Specify encoder for MP3

LAME=lame				# Path to MP3 encoder
LAMEOPTS='-m j -b 320 --silent'		# Options for MP3. Joint stereo, silent

# --tt <title>		Title (max 30 chars for version 1 tag)
# --ta <artist>		Artist (max 30 chars for version 1 tag)
# --tl <album>		Album (max 30 chars for version 1 tag)
# --ty <year>		Year of issue (1 to 9999)
# --tc <comment>	User-defined text (max 30 chars for v1 tag, 28 for v1.1)
# --tn <track[/total]>	Track number and (optionally) the total
#			number of tracks on the original recording. (track
#			and total each 1 to 255. just the track number
#			creates v1.1 tag, providing a total forces v2.0).
# --tg <genre>		Genre (name or number in list)
# --ti <file>		AlbumArt (jpeg/png/gif file, v2.3 tag)

# [VBR] Very high quality: HiFi, home, or quiet listening, with best file size
#
# -V 0 (~245 kbps), -V 1 (~225 kbps), -V 2 (~190 kbps) or -V 3 (~175 kbps) are recommended.
#
# These VBR settings will normally produce transparent results. Audible differences between these presets may exist, but are rare.
# [CBR] Very high quality: HiFi, home, or quiet listening, with maximum file size
#
# -b 320 is an alternative to the VBR settings above.
#
# This CBR mode will maximize the MP3's bitrate and overall file size. The extra space may allow for some parts of the audio to be compressed with fewer sacrifices, but to date, no one has produced ABX test results demonstrating that perceived quality is ever better than the highest VBR profiles described above.[2]
# Portable: listening in noisy conditions, lower bitrate, smaller file size
#
# -V 4 (~165 kbps), -V 5 (~130 kbps) or -V 6 (~115 kbps) are recommended.
#
# -V 6 produces an "acceptable" quality, while -V 4 should be close to perceptual transparency. 

GLYRC=glyrc
#GLYRCOPTS="--formats jpg;jpeg"

# -v --verbosity <integer>
#
# The verbosity level that is used by libglyr:
#
#	0 = No output, but fatal errors.
#	1 = Basic warnings.
#	2 = Normal informal output
#	3 = Basic debug output
#	4 = Full debug output

# -i --minsize

CONVERT=convert
ALBUMARTFILE="Front.jpg"
# Can only have one option here of: png, jpeg, tiff or jpg.
ALBUMARTTYPE="jpg"

# Options for convert/ImageMagick commands used by album art processing when available
# For example: CONVERTOPTS="-colorspace RGB -resize 600x600>"
# to make the image RGB and fit inside 600x600 while keeping the aspect ratio
#IDENTIFYOPTS=
#CONVERTOPTS=
#DISPLAYCMDOPTS="-resize 512x512 -title abcde_album_art"

# By default convert is only called when the image type is different from
# ALBUMARTTYPE, use ALBUMARTALWAYSCONVERT="y" to always call convert
#ALBUMARTALWAYSCONVERT="y"

#ID3=id3
#ID3OPTS=""

#ID3V2=id3v2
#ID3V2OPTS='-a "${ARTISTFILE}" -A "${ALBUMFILE}" -c "" -g "${GENRE}" -t "${TRACKFILE}" -T "${TRACKNUM}" -y "${YEAR}"'

EYED3=eyeD3
#EYED3OPTS="--encoding utf16"

#	--non-std-genres

#EYED3OPTS="-a ${ARTISTFILE} -A ${DALBUM} -d 0 -D 0 -t ${TRACKNAME} -n ${TRACKNUM} -N ${TRACKS} -Y ${CDYEAR} --add-image Front.jpg:FRONT_COVER ${TRACKNUM}*.mp3"
#EYED3OPTS="-a '${ARTISTFILE}' -A '${DALBUM}' -d 0 -D 0 -t '${TRACKNAME}' -n '${TRACKNUM}' -N '${TRACKS}' -Y '${CDYEAR}' --add-image '${ALBUMARTFILE}':FRONT_COVER"


#usage: eyeD3 [-h] [--version] [-l LEVEL[:LOGGER]] [--profile] [--pdb]
#             [--exclude PATTERN] [--fs-encoding ENCODING] [-L] [-P NAME]
#             [-C FILE] [--backup] [-Q] [--no-color] [--no-config] [-a STRING]
#             [-A STRING] [-b STRING] [-t STRING] [-n NUM] [-N NUM]
#             [--track-offset N] [--composer STRING] [-d NUM] [-D NUM]
#             [-G GENRE] [--non-std-genres] [-Y YEAR] [-c STRING]
#             [--rename PATTERN] [-1] [-2] [--to-v1.1] [--to-v2.3] [--to-v2.4]
#             [--release-date DATE] [--orig-release-date DATE]
#             [--recording-date DATE] [--encoding-date DATE]
#             [--tagging-date DATE] [--publisher STRING] [--play-count <+>N]
#             [--bpm N] [--unique-file-id OWNER_ID:ID]
#             [--add-comment COMMENT[:DESCRIPTION[:LANG]]]
#             [--remove-comment DESCRIPTION[:LANG]] [--remove-all-comments]
#             [--add-lyrics LYRICS_FILE[:DESCRIPTION[:LANG]]]
#             [--remove-lyrics DESCRIPTION[:LANG]] [--remove-all-lyrics]
#             [--text-frame FID:TEXT] [--user-text-frame DESC:TEXT]
#             [--url-frame FID:URL] [--user-url-frame DESCRIPTION:URL]
#             [--add-image IMG_PATH:TYPE[:DESCRIPTION]]
#             [--remove-image DESCRIPTION] [--remove-all-images]
#             [--write-images DIR]
#             [--add-object OBJ_PATH:MIME-TYPE[:DESCRIPTION[:FILENAME]]]
#             [--remove-object DESCRIPTION] [--write-objects DIR]
#             [--remove-all-objects]
#             [--add-popularity EMAIL:RATING[:PLAY_COUNT]]
#             [--remove-popularity EMAIL] [--remove-v1] [--remove-v2]
#             [--remove-all] [--remove-frame FID] [--max-padding NUM_BYTES]
#             [--no-max-padding] [--encoding latin1|utf8|utf16|utf16-be]
#             [--force-update] [-v] [--preserve-file-times]
#             [PATH [PATH ...]]
#
#positional arguments:
#  PATH                  Files or directory paths
#
#optional arguments:
#  -h, --help            show this help message and exit
#  --version             Display version information and exit
#  --exclude PATTERN     A regular expression for path exclusion. May be
#                        specified multiple times.
#  --fs-encoding ENCODING
#                        Use the specified file system encoding for filenames.
#                        Default as it was detected is 'utf-8' but this option
#                        is still useful when reading from mounted file
#                        systems.
#  -L, --plugins         List all available plugins
#  -P NAME, --plugin NAME
#                        Specify which plugin to use. The default is 'classic'
#  -C FILE, --config FILE
#                        Supply a configuration file. The default is
#                        '/home/pi/.eyeD3/config.ini', although even that is
#                        optional.
#  --backup              Plugins should honor this option such that a backup is
#                        made of any file modified. The backup is made in same
#                        directory with a '.orig' extension added.
#  -Q, --quiet           A hint to plugins to output less.
#  --no-color            Suppress color codes in console output. This will
#                        happen automatically if the output is not a TTY (e.g.
#                        when redirecting to a file)
#  --no-config           Do not load the default user config
#                        '/home/pi/.eyeD3/config.ini'. The -c/--config options
#                        are still honored if present.
#
#Debugging:
#  -l LEVEL[:LOGGER], --log-level LEVEL[:LOGGER]
#                        Set a log level. This option may be specified multiple
#                        times. If a logger name is specified than the level
#                        applies only to that logger, otherwise the level is
#                        set on the top-level logger. Acceptable levels are
#                        'debug', 'verbose', 'info', 'warning', 'error',
#                        'critical'.
#  --profile             Run using python profiler.
#  --pdb                 Drop into 'pdb' when errors occur.
#
#Plugin options:
#  Classic eyeD3 interface for viewing and editing tags.
# 
#  All PATH arguments are parsed and displayed. Directory paths are searched
#  recursively. Any editing options (--artist, --title) are applied to each file
#  read.
#  
#  All date options (-Y, --release-year excepted) follow ISO 8601 format. This is
#  ``yyyy-mm-ddThh:mm:ss``. The year is required, and each component thereafter is
#  optional. For example, 2012-03 is valid, 2012--12 is not.
#
#  -a STRING, --artist STRING
#                        Set the artist name.
#  -A STRING, --album STRING
#                        Set the album name.
#  -b STRING, --album-artist STRING
#                        Set the album artist name. 'Various Artists', for
#                        example. Another example is collaborations when the
#                        track artist might be 'Eminem featuring Proof' the
#                        album artist would be 'Eminem'.
#  -t STRING, --title STRING
#                        Set the track title.
#  -n NUM, --track NUM   Set the track number. Use 0 to clear.
#  -N NUM, --track-total NUM
#                        Set total number of tracks. Use 0 to clear.
#  --track-offset N      Increment/decrement the track number by [-]N. This
#                        option is applied after --track=N is set.
#  --composer STRING     Set the composer's name.
#  -d NUM, --disc-num NUM
#                        Set the disc number. Use 0 to clear.
#  -D NUM, --disc-total NUM
#                        Set total number of discs in set. Use 0 to clear.
#  -G GENRE, --genre GENRE
#                        Set the genre. If the argument is a standard ID3 genre
#                        name or number both will be set. Otherwise, any string
#                        can be used. Run 'eyeD3 --plugin=genres' for a list of
#                        standard ID3 genre names/ids.
#  --non-std-genres      Disables certain ID3 genre standards, such as the
#                        mapping of numeric value to genre names.
#  -Y YEAR, --release-year YEAR
#                        Set the year the track was released. Use the date
#                        options for more precise values or dates other than
#                        release.
#  -c STRING, --comment STRING
#                        Set a comment. In ID3 tags this is the comment with an
#                        empty description. See --add-comment to add multiple
#                        comment frames.
#  --rename PATTERN      Rename file (the extension is not affected) based on
#                        data in the tag using substitution variables: $album,
#                        $album_artist, $artist, $best_date,
#                        $best_date:prefer_recording,
#                        $best_date:prefer_recording:year,
#                        $best_date:prefer_release,
#                        $best_date:prefer_release:year, $best_date:year,
#                        $disc:num, $disc:total, $file, $file:ext,
#                        $original_release_date, $original_release_date:year,
#                        $recording_date, $recording_date:year, $release_date,
#                        $release_date:year, $title, $track:num, $track:total
#
#ID3 options:
#  -1, --v1              Only read and write ID3 v1.x tags. By default, v1.x
#                        tags are only read or written if there is not a v2 tag
#                        in the file.
#  -2, --v2              Only read/write ID3 v2.x tags. This is the default
#                        unless the file only contains a v1 tag.
#  --to-v1.1             Convert the file's tag to ID3 v1.1 (Or 1.0 if there is
#                        no track number)
#  --to-v2.3             Convert the file's tag to ID3 v2.3
#  --to-v2.4             Convert the file's tag to ID3 v2.4
#  --release-date DATE   Set the date the track/album was released
#  --orig-release-date DATE
#                        Set the original date the track/album was released
#  --recording-date DATE
#                        Set the date the track/album was recorded
#  --encoding-date DATE  Set the date the file was encoded
#  --tagging-date DATE   Set the date the file was tagged
#  --publisher STRING    Set the publisher/label name
#  --play-count <+>N     Set the number of times played counter. If the
#                        argument value begins with '+' the tag's play count is
#                        incremented by N, otherwise the value is set to
#                        exactly N.
#  --bpm N               Set the beats per minute value.
#  --unique-file-id OWNER_ID:ID
#                        Add a unique file ID frame. If the ID arg is empty the
#                        frame is removed. An OWNER_ID is required. The ID may
#                        be no more than 64 bytes.
#  --add-comment COMMENT[:DESCRIPTION[:LANG]]
#                        Add or replace a comment. There may be more than one
#                        comment in a tag, as long as the DESCRIPTION and LANG
#                        values are unique. The default DESCRIPTION is '' and
#                        the default language code is 'eng'.
#  --remove-comment DESCRIPTION[:LANG]
#                        Remove comment matching DESCRIPTION and LANG. The
#                        default language code is 'eng'.
#  --remove-all-comments
#                        Remove all comments from the tag.
#  --add-lyrics LYRICS_FILE[:DESCRIPTION[:LANG]]
#                        Add or replace a lyrics. There may be more than one
#                        set of lyrics in a tag, as long as the DESCRIPTION and
#                        LANG values are unique. The default DESCRIPTION is ''
#                        and the default language code is 'eng'.
#  --remove-lyrics DESCRIPTION[:LANG]
#                        Remove lyrics matching DESCRIPTION and LANG. The
#                        default language code is 'eng'.
#  --remove-all-lyrics   Remove all lyrics from the tag.
#  --text-frame FID:TEXT
#                        Set the value of a text frame. To remove the frame,
#                        specify an empty value. For example, --text-
#                        frame='TDRC:'
#  --user-text-frame DESC:TEXT
#                        Set the value of a user text frame (i.e., TXXX). To
#                        remove the frame, specify an empty value. e.g.,
#                        --user-text-frame='SomeDesc:'
#  --url-frame FID:URL   Set the value of a URL frame. To remove the frame,
#                        specify an empty value. e.g., --url-frame='WCOM:'
#  --user-url-frame DESCRIPTION:URL
#                        Set the value of a user URL frame (i.e., WXXX). To
#                        remove the frame, specify an empty value. e.g.,
#                        --user-url-frame='SomeDesc:'
#  --add-image IMG_PATH:TYPE[:DESCRIPTION]
#                        Add or replace an image. There may be more than one
#                        image in a tag, as long as the DESCRIPTION values are
#                        unique. The default DESCRIPTION is ''. If PATH begins
#                        with 'http[s]://' then it is interpreted as a URL
#                        instead of a file containing image data. The TYPE must
#                        be one of the following: OTHER, ICON, OTHER_ICON,
#                        FRONT_COVER, BACK_COVER, LEAFLET, MEDIA, LEAD_ARTIST,
#                        ARTIST, CONDUCTOR, BAND, COMPOSER, LYRICIST,
#                        RECORDING_LOCATION, DURING_RECORDING,
#                        DURING_PERFORMANCE, VIDEO, BRIGHT_COLORED_FISH,
#                        ILLUSTRATION, BAND_LOGO, PUBLISHER_LOGO.
#  --remove-image DESCRIPTION
#                        Remove image matching DESCRIPTION.
#  --remove-all-images   Remove all images from the tag
#  --write-images DIR    Causes all attached images (APIC frames) to be written
#                        to the specified directory.
#  --add-object OBJ_PATH:MIME-TYPE[:DESCRIPTION[:FILENAME]]
#                        Add or replace an object. There may be more than one
#                        object in a tag, as long as the DESCRIPTION values are
#                        unique. The default DESCRIPTION is ''.
#  --remove-object DESCRIPTION
#                        Remove object matching DESCRIPTION.
#  --write-objects DIR   Causes all attached objects (GEOB frames) to be
#                        written to the specified directory.
#  --remove-all-objects  Remove all objects from the tag
#  --add-popularity EMAIL:RATING[:PLAY_COUNT]
#                        Adds a pupularity metric. There may be multiples
#                        popularity values, but each must have a unique email
#                        address component. The rating is a number between 0
#                        (worst) and 255 (best). The play count is optional,
#                        and defaults to 0, since there is already a dedicated
#                        play count frame.
#  --remove-popularity EMAIL
#                        Removes the popularity frame with the specified email
#                        key.
#  --remove-v1           Remove ID3 v1.x tag.
#  --remove-v2           Remove ID3 v2.x tag.
#  --remove-all          Remove ID3 v1.x and v2.x tags.
#  --remove-frame FID    Remove all frames with the given ID. This option may
#                        be specified multiple times.
#  --max-padding NUM_BYTES
#                        Shrink file if tag padding (unused space) exceeds the
#                        given number of bytes. (Useful e.g. after removal of
#                        large cover art.) Default is 64 KiB, file will be
#                        rewritten with default padding (1 KiB) or max padding,
#                        whichever is smaller.
#  --no-max-padding      Disable --max-padding altogether.
#  --encoding latin1|utf8|utf16|utf16-be
#                        Set the encoding that is used for all text frames.
#                        This option is only applied if the tag is updated as
#                        the result of an edit option (e.g. --artist, --title,
#                        etc.) or --force-update is specified.
#
#Misc options:
#  --force-update        Rewrite the tag despite there being no edit options.
#  -v, --verbose         Show all available tag data
#  --preserve-file-times
#                        When writing, do not update file modification times.





CDSPEED=eject
#CDSPEEDOPTS=""

#  minutes at x16
# 10 minutes at x24
CDSPEEDVALUE="16"			# Multiples of 150kbs



OUTPUTTYPE="mp3"

# Output directories.
#
#OUTPUTDIR="/home/pi/Music/CD"
#
# Set by 'pre_read ()'.
OUTPUTDIR=""

# Set by 'pre_read ()'.
#CDROM="/dev/cdrom"

# The location where the ripped CD information is stored.
# Set by 'pre_read ()'.
DISCIDHOMEDIR=""

# Rip to tmpfs (RAM disk) for fastest rips.
# Set by 'pre_read ()'.
#WAVOUTPUTDIR="/tmp"
#WAVOUTPUTDIR="/run"
WAVOUTPUTDIR=""

# Do not rip the whole cd into one track.
ONETRACK="n"

# NOTE: Use single quotes (') for the variables OUTPUTFORMAT, VAOUTPUTFORMAT, PLAYLISTFORMAT and VAPLAYLISTFORMAT.
#
# Decide here how you want the tracks labelled for a standard 'single-artist',
# multi-track encode and also for a multi-track, 'various-artist' encode:
# Allowed variables are OUTPUT, GENRE, ALBUMFILE, ARTISTFILE, TRACKFILE, TRACKNUM, and YEAR.
# TRACKNUM is automatically zero-padded when the number of encoded tracks is higher than 9.
OUTPUTFORMAT='${ARTISTFILE}/${ALBUMFILE}/${TRACKNUM} ${TRACKFILE}'

VAOUTPUTFORMAT='Various Artists/${TRACKNUM} ${TRACKFILE}'

# Decide here how you want the tracks labelled for a standard 'single-artist',
# single-track encode and also for a single-track 'various-artist' encode.
# (Create a single-track encode with 'abcde -1' from the commandline.)
ONETRACKOUTPUTFORMAT=$OUTPUTFORMAT
VAONETRACKOUTPUTFORMAT=$VAOUTPUTFORMAT

# Create playlists for single and various-artist encodes.
# I would suggest commenting these out for single-track encoding.
PLAYLISTFORMAT='${ARTISTFILE}/${ALBUMFILE}/${ALBUMFILE}.m3u'
VAPLAYLISTFORMAT='${ARTISTFILE}/${ALBUMFILE}/${ALBUMFILE}.m3u'

EJECT=eject
#EJECTOPTS=""

# If set to "y" will call eject to eject the cdrom from the drive after all tracks have been read. 
EJECTCD="y"

# 0, 1 or 2.
# Set by 'pre_read ()'.
EXTRAVERBOSE=0



# This function takes out dots preceding the album name, and removes a grab
# bag of illegal characters. It allows spaces, if you do not wish spaces add
# in -e 's/ /_/g' after the first sed command.
mungefilename ()
{
	echo "$@" | sed -e 's/^\.*//' | tr -d ":><|*/\"'?[:cntrl:]"
###	echo "$@" | sed -e 's/^\.*//' | tr -d ":><|*/\"'?[:cntrl:]" | tr "[:upper:]" "[:lower:]"



# CDDISKID=$(cd-discid "$CDROM")
# FIRSTPART=$(echo $CDDISKID | cut -d' ' -f1)
# echo $FIRSTPART "$@" | [your full file path]/munger.py



}



# VARIANT 1: (works anywhere style)
#
# Translate everything to lowercase
# replace ALL chars that may cause trouble for Linux, Windows and DOS
# with '_' (underscore); remove double underscores; remove leading and
# trailing underscores; recode to flat ASCII. WARNING! You'll likely
# need to install "recode" on your system as an extra package to use
# this.
#
#mungefilename ()
#{
#       echo "$@" | tr [A-Z] [a-z] | \
#                       sed "s/[- ,.:\'\/!@#\?\$%\^&()]/_/g" | \
#                       sed 's/_[_]*/_/g' | \
#                       sed 's/^_*//' | \
#                       sed 's/_*$//' | \
#                       recode -f iso8859-1..flat
#
# VARIANT 2: (legible style)
#
# Accept all chars, EXCEPT '/' (obvious) or ":" (because eyeD3 cannot
# cope with ":" in pathnames): replace them with " " (space).
# Additionally, replace contiguous spaces with one space; strip
# leading spaces; strip trailing spaces and recode to flat filenames.
#
#mungefilename ()
#{
#      echo "$@" |     sed "s/[:\/]/ /g" | \
#                      sed 's/ [ ]*/ /g' | \
#                      sed 's/^ *//' | \
#                      sed 's/ *$//' | \
#                      recode -f iso8859-1..flat
#}
#
# Custom filename munging specific to track names:
# By default this function will call the mungefilename function.
#mungetrackname ()
#{
#       mungefilename $@
#}
#
# Custom filename munging specific to artist names:
# By default this function will call the mungefilename function.
#mungeartistname ()
#{
#       mungefilename $@
#}
#
# Custom filename munging specific to album names:
# By default this function will call the mungefilename function.
#mungealbumname ()
#{
#       mungefilename $@
#}



# Custom genre munging:
# By default we just transform uppercase to lowercase. Not much of a fancy function,
# with not much use, but one can disable it or just turn the first Uppercase.
#mungegenre ()
#{
#	echo $CDGENRE | tr "[:upper:]" "[:lower:]"
#}



# Custom functions:

ADD_LAST_SLASH () {
	if [[ "/" == "${1: -1}" ]]; then
		# Already added.
		echo "${1}"
	else
		# Add the last slash.
		echo "${1}/"
	fi
}

REMOVE_LAST_SLASH () {
	 echo "${1%/}"
}

# A shell function which is executed before the CDROM is read for the first time, during abcde execution.
# It can be used to:
#	* Close the CD tray using eject -t (if available in eject and supported by your CD device.
#	* Set the CD speed. You can also use the built-in options, but you can also
#		set it here. In Debian, eject -x and cdset -x do the job.
# KEEP IN MIND that executables included in pre_read must be in your $PATH or
# you have to define them with full /path/to/binary
pre_read ()
{
# These constants used for '_LOG_LEVEL' are exported by 'cd-rip-and-or-play.sh'.
#
#	LOG_LEVEL_NOLOG
#	LOG_LEVEL_FATAL
#	LOG_LEVEL_ERROR
#	LOG_LEVEL_WARN
#	LOG_LEVEL_OK
#	LOG_LEVEL_LOG
#	LOG_LEVEL_DEBUG
#
# These variables are exported by 'cd-rip-and-or-play.sh'.
#
#	_LOG_LEVEL
#	CDROM			# Usually /dev/cdrom
#	RIPPED_MUSIC_OWNER	# 'pi:pi'
#	MUSIC_DIR		# '/var/lib/mpd/music/SDCARD/CD' or '/var/lib/mpd/music/USB/CD'.
#	MUSIC_SUB_DIR		# '' or 'CD'
#	_G_DISCID_DIR		# '/home/pi/Music-CD/.Music CDs Ripped'
#	TEMP_DIR		# '/run'
#	LOGFILE			# '/var/log/${_SCRIPTNAME}.log'



echo ""
echo ""



# CDSPEEDVALUE="16"			# Multiples of 150kbs

# OUTPUTTYPE="mp3"



# 0...6 ie LOG_LEVEL_NOLOG, LOG_LEVEL_FATAL, LOG_LEVEL_ERROR,
#    LOG_LEVEL_WARN, LOG_LEVEL_OK, LOG_LEVEL_LOG, LOG_LEVEL_DEBUG
case ${_LOG_LEVEL} in
	"${LOG_LEVEL_NOLOG}")		EXTRAVERBOSE=0		;;
	"${LOG_LEVEL_FATAL}")		EXTRAVERBOSE=1		;;
	"${LOG_LEVEL_ERROR}")		EXTRAVERBOSE=1		;;
	"${LOG_LEVEL_WARN}")		EXTRAVERBOSE=1		;;
	"${LOG_LEVEL_OK}")		EXTRAVERBOSE=1		;;
	"${LOG_LEVEL_LOG}")		EXTRAVERBOSE=1		;;
	"${LOG_LEVEL_DEBUG}")		EXTRAVERBOSE=2		;;
	*)				EXTRAVERBOSE=0		;;
esac

#EXTRAVERBOSE=1

# This is already exported by 'cd-rip-and-or-play.sh'.
# CDROM=/dev/cdrom
CDROM=$(REMOVE_LAST_SLASH "${CDROM}")

# OUTPUTDIR="/home/pi/Music/CD"
# /var/lib/mpd/music/SDCARD/CD
OUTPUTDIR=$(REMOVE_LAST_SLASH "${MUSIC_DIR}")

### Not used.
### CD/
### $(ADD_LAST_SLASH "${MUSIC_SUB_DIR}")

# The location where the ripped CD information is stored.
# DISCIDHOMEDIR="/home/pi/Music-CD/.Music CDs Ripped/"
DISCIDHOMEDIR=$(ADD_LAST_SLASH "${_G_DISCID_DIR}")

# WAVOUTPUTDIR="/run"
WAVOUTPUTDIR=$(REMOVE_LAST_SLASH "${TEMP_DIR}")

### Not used.
### /var/log/cd-rip-and-or-play.log
### "${LOGFILE}"



echo "ExtraVerbose:  ${EXTRAVERBOSE}"
echo "Cdrom:         ${CDROM}                            # /dev/cdrom"
echo "OutputDir:     ${OUTPUTDIR}          # /var/lib/mpd/music/SDCARD/CD"
echo "DiscIdHomeDir: ${DISCIDHOMEDIR}              # /home/pi/Music-CD/.Music CDs Ripped/"
echo "WavOutputDir:  ${WAVOUTPUTDIR}                                  # /run"
echo ""

#exit -2



# If the output directory has not been specified.
if [ -z "${OUTPUTDIR}" ]; then
	# Look for the music directory that is specified in mpd.conf.

	echo "Looking in '\etc\mpd.conf' for the music directory."

	# Read the file in row mode and extract each line.
	while IFS= read -r LINE; do
		#  music_directory      "/var/lib/mpd/music"
		_KEY=${LINE% *}
		_VALUE=${LINE##* }

		if [ "${_KEY}" == "music_directory" ]; then
			# Remove the " character from the start and end of the value token.
			_VALUE=${_VALUE#\"}
			_VALUE=${_VALUE%\"}

			# Returns: /var/lib/mpd/music/SDCARD/CD
			OUTPUTDIR="${_VALUE}/SDCARD/CD"
		fi
	done < "/etc/mpd.conf"
fi

# If no music directory found.
if [ -z "${OUTPUTDIR}" ]; then
	echo "ERROR: Cannot find the music directory."

	exit -1
fi

echo "Using music directory: ${OUTPUTDIR}"

# This should not be needed because CDROM has already been defined in 'cd-rip-and-or-play.sh'.
# If the cdrom path has not been defined or cannot find the cdrom path.
if [[ ( -z "${CDROM}" ) || ( ! -e ${CDROM} ) ]]; then
	echo "Searching for the cdrom drive."

	sleep 5

	# Find out which device the CDROM appears as.
	CDROM=/dev/cdrom
	CDPATH=/dev/sr

	if [ -e ${CDPATH}0 ]; then
		CDROM=${CDPATH}0
	fi

	if [ -e ${CDPATH}1 ]; then
		CDROM=${CDPATH}1
	fi
fi

echo "Using CDROM drive: ${CDROM}"
echo ""

chmod 644 ${CDROM}

sleep 0.5
}



# A shell function which is executed after the CDROM is read (and, if applies, before the CDROM is ejected).
# It can be used to read a TOC from the CDROM, or to try to read the DATA areas from the CD (if any exist).
# KEEP IN MIND that executables included in pre_read must be in your $PATH or you have to define them
# with full /path/to/binary
post_read ()
{
# NOTE: echo does not work the same as in 'post_encode'.
# You can only echo to a file.
#
LGFIL="/README cd-rip.txt"

QAZx1=$(pwd)
echo "pwd: ${QAZx1}" > "${LGFIL}"

echo "" >> "${LGFIL}"
echo "*********************************************************" >> "${LGFIL}"
echo "" >> "${LGFIL}"

QAZx2=$(ls -la "${OUTPUTDIR}/${ARTISTFILE}/${ALBUMFILE}")
echo "${QAZx2}" >> "${LGFIL}"

echo "" >> "${LGFIL}"
echo "*********************************************************" >> "${LGFIL}"

# Outputs:
#
# pwd: /home/pi/Src/cd-rip
#
# *********************************************************
#
# total 10312
# drwxr-xr-x 2 root root    4096 May 13 17:59 .
# drwxr-xr-x 3 root root    4096 May 13 17:57 ..
# -rw-r--r-- 1 root root 8119297 May 13 17:59 02 It’s So Easy.mp3
# -rw-r--r-- 1 root root 2425562 May 13 17:57 Front.jpg
#
# *********************************************************
}



# A shell function which is executed after the encoding process.
# It can be used to:
#	* Move the resulting directory to another location or over the network.
#	* Compare results with a previously made run, for tests
# KEEP IN MIND that executables included in post_encode must be in your $PATH or
# you have to define them with full /path/to/binary
post_encode ()
{
if [ -d "${OUTPUTDIR}/${ARTISTFILE}/${ALBUMFILE}" ]; then
	echo ""
	echo ""

# We should be in: /home/pi/Music/CD/ACDC/Black Ice

	echo "Changing directory mode to 755"

	chmod 755 "${OUTPUTDIR}/${ARTISTFILE}"
	chmod 755 "${OUTPUTDIR}/${ARTISTFILE}/${ALBUMFILE}"

	echo "Changing directory owner to ${RIPPED_MUSIC_OWNER}"

	chown "${RIPPED_MUSIC_OWNER}" "${OUTPUTDIR}/${ARTISTFILE}"
	chown "${RIPPED_MUSIC_OWNER}" "${OUTPUTDIR}/${ARTISTFILE}/${ALBUMFILE}"

	echo ""
	echo ""
	echo ""

	echo "Outputdir:   " ${OUTPUTDIR}
	echo ""
	echo "CDDB discid: " ${CDDBDISCID}
	echo ""
	echo "Artistfile:  " ${ARTISTFILE}
	echo "Albumfile:   " ${ALBUMFILE}
	echo "Trackfile:   " ${TRACKFILE}
	echo "Dartist:     " ${DARTIST}
	echo "Dalbum:      " ${DALBUM}
	echo "CD year:     " ${CDYEAR}
	echo "CD genre:    " ${CDGENRE}
	echo "Genre:       " ${GENRE}
	echo "Tracks:      " ${TRACKS}
###	echo "Track num:   " ${TRACKNUM}
###	echo "Track name:  " ${TRACKNAME}
	echo "Track artist:" ${TRACKARTIST}

	echo ""
	echo ""
	echo ""

	# If the disc id directory does not exist, create it.
	# /home/pi/.Music CD Tags/
	if [ ! -d "${DISCIDHOMEDIR}" ]; then
		echo "Creating: ${DISCIDHOMEDIR}"
		echo ""

		# Create the CD disc id playlist directory.
		mkdir "${DISCIDHOMEDIR}"

		chmod 755 "${DISCIDHOMEDIR}"

		chown "${RIPPED_MUSIC_OWNER}" "${DISCIDHOMEDIR}"
	fi

	# /home/pi/.Music CD Tags/c90d090f-ACDC-Black Ice

	TARGETDISCIDFILE="${DISCIDHOMEDIR}${CDDBDISCID}-${ARTISTFILE}-${ALBUMFILE}"

	echo "Creating the ripped disc id file: ${TARGETDISCIDFILE}"

	touch "${TARGETDISCIDFILE}"

	chmod 644 "${TARGETDISCIDFILE}"

	chown "${RIPPED_MUSIC_OWNER}" "${TARGETDISCIDFILE}"

	# Write the header.
	echo "${DARTIST}
${DALBUM}
${CDYEAR}
${GENRE}
############################################################
" > "${TARGETDISCIDFILE}"

# ACDC/Black Ice/(ACDC) Black Ice - 03) Big Jack.mp3



# We should still be in: /home/pi/Music/CD/ACDC/Black Ice

echo ""
ls -la

	# Rename the tracks.
	echo ""
	echo "Renaming tracks..."

	for FILE in *.mp3; do
		# If the file exists.
		if [ -e "${FILE}" ]; then

			TRK=$(echo ${FILE} | cut -d' ' -f1 -)
			NAM=$(echo ${FILE} | cut -d' ' -f2- -)

			SRC="${TRK} ${NAM}"
			DST="(${ARTISTFILE}) ${ALBUMFILE} - ${TRK}) ${NAM}"

echo ""
echo "The next file to rename is:" ${FILE}
echo "SRC:" ${SRC}
echo "DST:" ${DST}
echo "Trk:" ${TRK}
echo "Nam:" ${NAM}			# With file extension
echo "Nam:" ${NAM%.mp3}			# Without file extension

			mv -f -T "${SRC}" "${DST}"

			RV=${?}

			if [ 0 -eq "${RV}" ]; then
				echo "Changing file mode..."

				chmod 444 "${DST}"

				echo "Changing owner..."

				chown "${RIPPED_MUSIC_OWNER}" "${DST}"

				# Add the filename to the disc id playlist.
				# ACDC/Black Ice/(ACDC) Black Ice - 03) Big Jack.mp3

				echo "Adding: ${ARTISTFILE}/${ALBUMFILE}/${DST}"
				echo "${ARTISTFILE}/${ALBUMFILE}/${DST}" >> "${TARGETDISCIDFILE}"

			fi	# End of 'if [ 0 -eq "${RV}" ]; then'
		fi		# End of 'if [ -e "${FILE}" ]; then'
	done			# End of 'for FILE in *.mp3; do'

	# All the audio files have been renamed.

	# Move 'Front.jpg' cover file to the correct folder.
	# ie:
	#	From:	 /home/pi/Music/CD/ACDC/Front.jpg
	#	To:	 /home/pi/Music/CD/ACDC/Black Ice/Front.jpg

#	# If the cover file exists.
#	if [ -f "$OUTPUTDIR/${ARTISTFILE}/${ALBUMARTFILE}" ]; then
#		echo ""
#		echo "Moving the cover file to: $OUTPUTDIR/${ARTISTFILE}/${ALBUMFILE}/${ALBUMARTFILE}"
#
#		mv "$OUTPUTDIR/${ARTISTFILE}/${ALBUMARTFILE}" "$OUTPUTDIR/${ARTISTFILE}/${ALBUMFILE}/${ALBUMARTFILE}"
#
#		# If the cover file has been sucessfully moved.
#		if [ -f "$OUTPUTDIR/${ARTISTFILE}/${ALBUMFILE}/${ALBUMARTFILE}" ]; then
#			chmod 444 "$OUTPUTDIR/${ARTISTFILE}/${ALBUMFILE}/${ALBUMARTFILE}"
#			chown "${RIPPED_MUSIC_OWNER}" "$OUTPUTDIR/${ARTISTFILE}/${ALBUMFILE}/${ALBUMARTFILE}"
#		fi
#	fi

	# If the cover file exists.
	# If the cover file has been sucessfully moved.
	if [ -f "$OUTPUTDIR/${ARTISTFILE}/${ALBUMFILE}/${ALBUMARTFILE}" ]; then
		chmod 444 "$OUTPUTDIR/${ARTISTFILE}/${ALBUMFILE}/${ALBUMARTFILE}"
		chown "${RIPPED_MUSIC_OWNER}" "$OUTPUTDIR/${ARTISTFILE}/${ALBUMFILE}/${ALBUMARTFILE}"
	fi

	if [ -f "TARGETDISCIDFILE}" ]; then
		# Write protect the cd disc id playlist.
		chmod 444 "${TARGETDISCIDFILE}"

		echo ""
		echo "The ripped disc id has been created: ${TARGETDISCIDFILE}"
	fi

echo ""
echo "All ${TRACKS} tracks should have been renamed."
echo ""
ls -la "${OUTPUTDIR}/${ARTISTFILE}/${ALBUMFILE}"

echo ""
echo "The ripped disc id file should have been created: ${TARGETDISCIDFILE}"
echo ""
ls -la "${DISCIDHOMEDIR}"
echo ""

fi	# End of 'if [ -d "${OUTPUTDIR}/${ARTISTFILE}/${ALBUMFILE}" ]; then'
}
